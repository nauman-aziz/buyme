generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  hashedPassword String?
  name          String?
  role          Role      @default(CUSTOMER)
  phone         String?
  avatarUrl     String?
  emailVerified DateTime?
  providerIds   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  carts         Cart[]
  orders        Order[]
  chatSessions  ChatSession[]
  auditLogs     AuditLog[]

  @@index([email])
  @@index([role])
}

model Address {
  id         String @id @default(cuid())
  userId     String?
  fullName   String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user                User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders      Order[] @relation("ShippingAddress")
  billingOrders       Order[] @relation("BillingAddress")

  @@index([userId])
}

model Category {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String
  description String?
  parentId    String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  products   Product[]

  @@index([slug])
  @@index([parentId])
  @@index([isActive])
}

model Product {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String
  subtitle    String?
  description String? @db.Text
  sku         String?
  brand       String?
  specs       Json?
  isActive    Boolean @default(true)
  featured    Boolean @default(false)
  categoryId  String
  ratingAvg   Float   @default(0)
  ratingCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  images   ProductImage[]
  variants Variant[]

  @@index([slug])
  @@index([categoryId])
  @@index([isActive])
  @@index([featured])
}

model ProductImage {
  id        String @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([position])
}

model Variant {
  id             String  @id @default(cuid())
  productId      String
  name           String
  optionValues   Json?
  sku            String  @unique
  price          Int
  compareAtPrice Int?
  cost           Int?
  currency       String  @default("USD")
  weightGrams    Int?
  dimensions     Json?
  barcode        String?
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory   Inventory?
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([productId])
  @@index([sku])
  @@index([isActive])
}

model Inventory {
  id                String @id @default(cuid())
  variantId         String @unique
  quantity          Int    @default(0)
  lowStockThreshold Int    @default(5)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([quantity])
  @@index([lowStockThreshold])
}

model Cart {
  id             String @id @default(cuid())
  userId         String?
  sessionToken   String?
  currency       String @default("USD")
  subtotal       Int    @default(0)
  discountsTotal Int    @default(0)
  shippingTotal  Int    @default(0)
  taxTotal       Int    @default(0)
  grandTotal     Int    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@index([userId])
  @@index([sessionToken])
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  variantId String
  quantity  Int
  unitPrice Int
  lineTotal Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
  @@index([cartId])
  @@index([variantId])
}

enum OrderStatus {
  PENDING
  IN_REVIEW
  DISPATCHED
  ON_THE_WAY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  AUTHORIZED
  PAID
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  FULFILLED
  PARTIAL
}

model Order {
  id                 String            @id @default(cuid())
  orderNumber        String            @unique
  userId             String?
  email              String
  status             OrderStatus       @default(PENDING)
  paymentStatus      PaymentStatus     @default(UNPAID)
  fulfillmentStatus  FulfillmentStatus @default(UNFULFILLED)
  currency           String            @default("USD")
  subtotal           Int
  discountsTotal     Int               @default(0)
  shippingTotal      Int               @default(0)
  taxTotal           Int               @default(0)
  grandTotal         Int
  shippingAddressId  String
  billingAddressId   String
  notes              String?
  placedAt           DateTime          @default(now())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user            User?      @relation(fields: [userId], references: [id])
  shippingAddress Address    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]

  @@index([orderNumber])
  @@index([userId])
  @@index([email])
  @@index([status])
  @@index([paymentStatus])
  @@index([placedAt])
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  variantId String
  quantity  Int
  unitPrice Int
  lineTotal Int
  snapshot  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant Variant @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([variantId])
}

enum PaymentProvider {
  STRIPE
  COD
  BANK_TRANSFER
}

enum PaymentProviderStatus {
  INITIATED
  AUTHORIZED
  SUCCEEDED
  FAILED
  REFUNDED
}

model Payment {
  id                   String                @id @default(cuid())
  orderId              String
  provider             PaymentProvider
  providerSessionId    String?
  providerPaymentId    String?
  amount               Int
  currency             String
  status               PaymentProviderStatus @default(INITIATED)
  raw                  Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([provider])
  @@index([status])
}

enum ShipmentStatus {
  PREPARING
  DISPATCHED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
}

model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  courierName    String
  trackingNumber String?
  status         ShipmentStatus @default(PREPARING)
  handedOverAt   DateTime?
  deliveredAt    DateTime?
  raw            Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([trackingNumber])
  @@index([status])
}

enum CouponType {
  PERCENT
  FIXED
}

model Coupon {
  id                String     @id @default(cuid())
  code              String     @unique
  description       String?
  type              CouponType
  value             Int
  minSubtotal       Int?
  startsAt          DateTime?
  endsAt            DateTime?
  maxRedemptions    Int?
  redemptionsCount  Int        @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([code])
  @@index([startsAt])
  @@index([endsAt])
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  tags      String[]
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  updatedAt DateTime @updatedAt

  @@index([tags])
}

model ChatSession {
  id            String   @id @default(cuid())
  userId        String?
  sessionToken  String?
  startedAt     DateTime @default(now())
  lastActiveAt  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User?         @relation(fields: [userId], references: [id])
  messages ChatMessage[]

  @@index([userId])
  @@index([sessionToken])
  @@index([lastActiveAt])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model ChatMessage {
  id            String      @id @default(cuid())
  chatSessionId String
  role          MessageRole
  content       String      @db.Text
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@index([chatSessionId])
  @@index([role])
}

model AuditLog {
  id           String  @id @default(cuid())
  actorUserId  String?
  action       String
  entityType   String
  entityId     String
  diff         Json?
  ip           String?
  userAgent    String?
  createdAt    DateTime @default(now())

  actor User? @relation(fields: [actorUserId], references: [id])

  @@index([actorUserId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
}

model WebhookEvent {
  id          String    @id @default(cuid())
  provider    String
  type        String
  raw         Json
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([provider])
  @@index([type])
  @@index([processedAt])
}